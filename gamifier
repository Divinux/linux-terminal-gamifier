#!/bin/bash

# =============================
# Linux Terminal Gamifier v1.6
# =============================
# This script gamifies your terminal by tracking experience points and levels
# based on the number of commands you execute. Newly found commands give more exp,
# repeated commands less, wrong commands still give a little. At least you tried.
#
# Setup for bash:
# 1. Save this file in your home directory
#        curl --output ~/gamifier "https://raw.githubusercontent.com/Divinux/linux-terminal-gamifier/refs/heads/main/gamifier"
# 2. Source the file in your bashrc. This can be done manually or by running
#        echo 'source ~/gamifier' >> ~/.bashrc
# 3. Ensure your history is reloaded after each command, then call update_exp
#    If you have not yet modified your PROMPT_COMMAND, you can simply run
#        echo 'export PROMPT_COMMAND="history -a; history -n; update_exp; $PROMPT_COMMAND"' >> ~/.bashrc
# 4. Restart your terminal or run
#        source ~/.bashrc
#
# Setup for zsh:
# 1. Save this file in your home directory
#        curl --output ~/gamifier "https://raw.githubusercontent.com/Divinux/linux-terminal-gamifier/refs/heads/main/gamifier"
# 2. Source the file in your zshrc. This can be done manually or by running
#        echo 'source ~/gamifier' >> ~/.zshrc
# 3. Ensure your history is reloaded after each command, then call update_exp
#    If you have not yet modified your precmd hook, you can simply run
#        echo -e "setopt incappendhistory\nprecmd() { update_exp; }" >> ~/.zshrc
# 4. Restart your terminal or run
#        source ~/.zshrc
#
# Setup for fish:
# 1. Save this file in your home directory
#        curl --output ~/gamifier "https://raw.githubusercontent.com/Divinux/linux-terminal-gamifier/refs/heads/main/gamifier"
# 2. Source the file in your fish config. This can be done manually or by running
#        echo 'bass source ~/gamifier' >> ~/.config/fish/config.fish
#    Note: This requires the bass plugin. Install it with:
#        fisher install edc/bass
# 3. Set up a function to run after each command is executed
#        echo -e 'function gamifier_hook --on-event fish_postexec\n    bass "source ~/gamifier && update_exp"\nend' >> ~/.config/fish/config.fish
# 4. Restart your terminal or run
#        source ~/.config/fish/config.fish
#
# Additional info:
# 1. This script creates a directory under $XDG_DATA_HOME (defaults to ~/.local/share/ and uses it as a
#    fallback if $XDG_DATA_HOME is not set) with four additional files:
#        .exp is used to track the current experience amount and level
#        .usedcommands contains all commands the user used so far
#        .achievements tracks the status of all achievements
#        .streak tracks the daily usage streak
#    To continue tracking your progress on a new install, just copy this directory over to it.
# 2. You may want to increase your HISTSIZE and HISTFILESIZE.
#    Setting them to nothing, i.e. "HISTSIZE=" and "HISTFILESIZE=" makes them unlimited
# 3. You can use checkrank at any time to check your current progress.
# 4. Use checkstats to display usage stats.
# 5. Use ghelp to display a short info message.
# 6. Use gupdate to update Linux Terminal Gamifier.
#
# Uninstall:
# 1. Remove 'source ~/gamifier' and update_exp; from your bashrc, or if using zsh
#    remove 'source ~/gamifier', 'setopt incappendhistory' and precmd() { update_exp; } from your .zshrc
#    or if using fish, remove 'bass source ~/gamifier' and the gamifier_hook function from ~/.config/fish/config.fish
# 2. Delete the gamifier file, and the ~/.local/share/gamifier directory
# 3. Restart your terminal
#
# Copyright (c) 2025 Divinux
# Licensed under the MIT License - see the LICENSE file for details.

# Define save directory
SAVE_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/gamifier"
mkdir -p "$SAVE_DIR"

# Create save files
exp_file="$SAVE_DIR/.exp"
used_commands_file="$SAVE_DIR/.usedcommands"
achievements_file="$SAVE_DIR/.achievements"
streak_file="$SAVE_DIR/.streak"

# Notification settings
notify_on_new=true
notify_on_reused=false
notify_on_false_new=true
notify_on_false_reused=false

# Custom messages
msg_new_command="New command discovered!"
msg_repeat_command="Experience gained!"
msg_false_new_command="Incorrect command! At least you tried!"
msg_false_repeat_command="Trying incorrect command again..."

# EXP settings
exp_new_command=3
exp_reused_command=2
exp_false_new_command=1
exp_false_reused_command=0

# EXP curve
exp_increase_percent=6
exp_base=30

# Initialize .exp file if it doesn't exist
if [ ! -f "$exp_file" ]; then
    echo "EXP=0" > "$exp_file"
    echo "LVL=1" >> "$exp_file"
    echo "TOTAL_COMMANDS=0" >> "$exp_file"
fi

# Initialize .usedcommands file if it doesn't exist
if [ ! -f "$used_commands_file" ]; then
    touch "$used_commands_file"
fi

# Initialize .streak file if it doesn't exist
if [ ! -f "$streak_file" ]; then
    echo "last_date_used=$(date +%Y-%m-%d)" > "$streak_file"
    echo "streak=1" >> "$streak_file"
fi

# Detect shell
SHELL_NAME=$(ps -p $$ -o comm=)

# Determine history file location
case "$SHELL_NAME" in
    bash)
		# if the variable HISTFILE is set, use it, otherwise default to .bash_history
		if [[ -n "$HISTFILE" ]]; then
            histfile="$HISTFILE"
        else
			histfile="$HOME/.bash_history"
		fi
        ;;
    zsh)
		# if the variable HISTFILE is set, use it, otherwise check for the most current default and use that
        if [[ -n "$HISTFILE" ]]; then
            histfile="$HISTFILE"
        else
            zsh_history_files=("$HOME/.histfile" "$HOME/.zsh_history")
            latest=$(ls -t "${ZSH_HISTORY_FILES[@]}" 2>/dev/null | head -n 1)
            histfile="${latest:-$HOME/.histfile}"
        fi
        ;;
    fish)
        # Fish history is typically in ~/.local/share/fish/fish_history
        histfile="$HOME/.local/share/fish/fish_history"
        ;;
	*)
		# if the variable HISTFILE is set, use it, otherwise just error output
		# this happens when ps fails
		if [[ -n "$HISTFILE" ]]; then
            histfile="$HISTFILE"
        else
			echo "History file could not be found. Please set the $HISTFILE variable."
		fi
        ;;
esac

prev_hist_count=$(wc -l < "$histfile")

# Get HISTSIZE limit
hist_size=${HISTSIZE:-500}

# Initialize achievements file if it doesn't exist
if [ ! -f "$achievements_file" ]; then
    cat <<EOF > "$achievements_file"
Bootstrapped:Use 5 unique commands:5:unique:LOCKED
Init Process:Use 10 unique commands:10:unique:LOCKED
System Call:Use 15 unique commands:15:unique:LOCKED
Interrupt Handler:Use 20 unique commands:20:unique:LOCKED
Overclocked:Use 25 unique commands:25:unique:LOCKED
Firmware Flash:Use 30 unique commands:30:unique:LOCKED
Pull Request:Use 40 unique commands:40:unique:LOCKED
Memory Leak:Use 50 unique commands:50:unique:LOCKED
Merge Conflict:Use 75 unique commands:75:unique:LOCKED
Infinite Rebase:Use 100 unique commands:100:unique:LOCKED
Segfault:Use 125 unique commands:125:unique:LOCKED
Cherry-Picked:Use 150 unique commands:150:unique:LOCKED
Force Push:Use 200 unique commands:200:unique:LOCKED
Fork Bomb:Use 250 unique commands:250:unique:LOCKED
Detached HEAD:Use 350 unique commands:350:unique:LOCKED
Kernel Panic:Use 500 unique commands:500:unique:LOCKED
First Steps:Use 10 commands total:10:total:LOCKED
Tentative Exploration:Use 20 commands total:20:total:LOCKED
Getting Comfortable:Use 30 commands total:30:total:LOCKED
Confidence Rising:Use 40 commands total:40:total:LOCKED
Settling In:Use 50 commands total:50:total:LOCKED
Building Momentum:Use 100 commands total:100:total:LOCKED
Familiar Ground:Use 250 commands total:250:total:LOCKED
Flow State Achieved:Use 500 commands total:500:total:LOCKED
In the Zone:Use 750 commands total:750:total:LOCKED
Unshakable Rhythm:Use 1000 commands total:1000:total:LOCKED
Second Nature:Use 2500 commands total:2500:total:LOCKED
Beyond Muscle Memory:Use 5000 commands total:5000:total:LOCKED
Terminal Nirvana:Use 10000 commands total:10000:total:LOCKED
Superuser:Run a command with sudo:sudo:command:LOCKED
Explorer:List files in a directory:ls:command:LOCKED
Nomad:Change directories:cd:command:LOCKED
Pathfinder:Display the current directory:pwd:command:LOCKED
Creator:Create a new file:touch:command:LOCKED
Architect:Create a new directory:mkdir:command:LOCKED
Destroyer:Delete a file:rm:command:LOCKED
Cleaner:Remove a directory:rmdir:command:LOCKED
Duplicator:Copy a file:cp:command:LOCKED
Transporter:Move or rename a file:mv:command:LOCKED
System Seer:View system information:uname:command:LOCKED
Survivor:Check system uptime:uptime:command:LOCKED
Space Navigator:Show disk space usage:df:command:LOCKED
Memory Master:Display RAM usage:free:command:LOCKED
Identity Crisis:Show current user:whoami:command:LOCKED
Gatekeeper:Change file permissions:chmod:command:LOCKED
Puppeteer:Change file ownership:chown:command:LOCKED
Process Watcher:View active processes:ps:command:LOCKED
Terminator:Kill a process:kill:command:LOCKED
Taskmaster:Monitor system tasks:top:command:LOCKED
Echo Seeker:Check network connection:ping:command:LOCKED
Data Hunter:Download a file from the web:wget:command:LOCKED
Web Whisperer:Fetch data from a URL:curl:command:LOCKED
Reader:Display a file's contents:cat:command:LOCKED
Scribe:Edit a file with nano:nano:command:LOCKED
Wizard:Edit a file with Vim:vim:command:LOCKED
Scholar:Read the manual:man:command:LOCKED
Performance Guru:Run btop:btop:command:LOCKED
Resource Watcher:Run htop:htop:command:LOCKED
Process Spy:Run pidof:pidof:command:LOCKED
System Analyst:Run vmstat:vmstat:command:LOCKED
Kernel Inspector:Run dmesg:dmesg:command:LOCKED
Log Seeker:Run journalctl:journalctl:command:LOCKED
Matrix Coder:Run cmatrix:cmatrix:command:LOCKED
Digital Botanist:Run bonsai:bonsai:command:LOCKED
ASCII Artist:Run figlet:figlet:command:LOCKED
Color Wizard:Run lolcat:lolcat:command:LOCKED
Hacker Mode:Run sl (Steam Locomotive):sl:command:LOCKED
Curiosity:Check Gamifier Stats:checkstats:command:LOCKED
Patience:Check Gamifier Level:checkrank:command:LOCKED
You'll Never Walk Alone:Check Gamifier Infopage:ghelp:command:LOCKED
Come back soon!:2 day streak:2:streak:LOCKED
Repeat Offender:3 day streak:3:streak:LOCKED
Business Week:5 day streak:5:streak:LOCKED
24/7:Use the terminal daily for a week:7:streak:LOCKED
It's Been Two Weeks:Use the terminal daily for two weeks:14:streak:LOCKED
Can't Stop Won't Stop:Use the terminal daily for a month:30:streak:LOCKED
Seasonal Employee:Use the terminal daily for three months:60:streak:LOCKED
Server-grade Dedication:Use the terminal daily for an entire year:365:streak:LOCKED
EOF
fi

# Function to get the current EXP
get_exp() {
    grep "EXP=" "$exp_file" | cut -d'=' -f2
}

# Function to set EXP
set_exp() {
    sed_inplace "$exp_file" "^EXP=.*" "EXP=$1"
}

# Function to get the current LVL
get_lvl() {
    grep "LVL=" "$exp_file" | cut -d'=' -f2
}

# Function to determine EXP required for next level
exp_needed_for_level() {
    local lvl=$(get_lvl)

    if [ "$lvl" -eq 1 ]; then
        echo "$exp_base"
    else
        echo $(echo "$exp_base * (($exp_increase_percent + 100) ^ ($lvl - 1)) / (100 ^ ($lvl - 1))" | bc)
    fi
}

# Function to level up if needed
level_up() {
    local exp=$(get_exp)
    local lvl=$(get_lvl)
    local needed=$(exp_needed_for_level)

    while [ "$exp" -ge "$needed" ]; do
        new_lvl=$((lvl + 1))
        level_up_message "$new_lvl"
        sed_inplace "$exp_file" "^LVL=.*" "LVL=$new_lvl"
        exp=$((exp - needed))
        needed=$(exp_needed_for_level)
        lvl=$new_lvl
    done
    set_exp "$exp"
}

# Function to unlock achievements
check_achievements() {
    local total_commands=$(awk -F'=' '/TOTAL_COMMANDS=/ {print $2}' "$exp_file")
    local unique_commands=$(wc -l < "$used_commands_file")
    local last_command=$1
    local streak=$(grep "streak=" "$streak_file" | cut -d'=' -f2)

    local updates=()
    while IFS=: read -r name description requirement type astatus; do
        if [ "$astatus" = "LOCKED" ]; then
            local unlock=false

            case "$type" in
                unique)
                    [ "$unique_commands" -ge "$requirement" ] && unlock=true
                    ;;
                total)
                    [ "$total_commands" -ge "$requirement" ] && unlock=true
                    ;;
                command)
                    [ "$first_word" = "$requirement" ] && unlock=true
                    ;;
                streak)
                    [ "$streak" -ge "$requirement" ] && unlock=true
                    ;;
            esac

            if [ "$unlock" = true ]; then
                echo "Achievement Unlocked: $name - $description!"
                # Escape special characters in sed pattern
                local escaped_name=$(echo "$name" | sed 's/[\/&]/\\&/g')
                local escaped_desc=$(echo "$description" | sed 's/[\/&]/\\&/g')
                local escaped_req=$(echo "$requirement" | sed 's/[\/&]/\\&/g')
                local escaped_type=$(echo "$type" | sed 's/[\/&]/\\&/g')
                updates+=("$escaped_name:$escaped_desc:$escaped_req:$escaped_type:LOCKED")
            fi
        fi
    done < "$achievements_file"

    # Apply updates one by one to avoid sed syntax errors
    for entry in "${updates[@]}"; do
        sed_inplace "$achievements_file" "^$entry" "${entry/LOCKED/UNLOCKED}"
    done
}

# Function to update or add command usage
update_command_usage() {
command="$(getlastcommand)"
# Use a subshell to avoid polluting the environment
    (
        export CMD="$command"
        awk -F ':::' '
            BEGIN { cmd = ENVIRON["CMD"] }
            $1 == cmd {
                $2 += 1
                found = 1
            }
            { print $1 ":::" $2 }
            END {
                if (!found) print cmd ":::" 1
            }
        ' $used_commands_file > $used_commands_file.tmp && mv $used_commands_file.tmp $used_commands_file
    )
}

# Helper function to handle command use
handle_command() {
    local command=$1
    local exp_increment=$2
    local message=$3
    local notify=$4

    # Update command usage count
    update_command_usage "$command"

    # Update EXP
    exp=$(get_exp)
    new_exp=$((exp + exp_increment))
    set_exp "$new_exp"

    # Update total commands count
    total_commands=$(grep "TOTAL_COMMANDS=" "$exp_file" | cut -d'=' -f2)
    total_commands=$((total_commands + 1))
    sed_inplace "$exp_file" "^TOTAL_COMMANDS=.*" "TOTAL_COMMANDS=$total_commands"

    # If notification is enabled, print message
    if [ "$notify" = true ]; then
        echo "$message"
		# If any EXP was gained, echo the new EXP to the console
        if [ "$exp_increment" -gt 0 ]; then
            echo "Current EXP: $new_exp/$(exp_needed_for_level)"
        fi
    fi
    # Check for achievements
    check_achievements "$command"
}

# Hook into the shell prompt
update_exp() {
    # Update streak
    update_streak
    local new_count=$(wc -l < "$histfile")

    # Check if history file has been truncated
    if [ "$new_count" -lt "$prev_hist_count" ] || [ "$new_count" -ge "$hist_size" ]; then
        echo "Warning! HISTSIZE was reached! Gamifier will not work!"
        echo "Please increase your HISTSIZE!"
        return
    fi

    if [ "$new_count" -gt "$prev_hist_count" ]; then
        prev_hist_count="$new_count"

        # Get the last command entered
        local last_command=$(getlastcommand)
        local first_word=$(echo "$last_command" | awk '{print $1}')

        # If command starts with sudo or doas, extract the actual command being run
        if [[ "$first_word" == "sudo" || "$first_word" == "doas" ]]; then
            first_word=$(echo "$last_command" | awk '{print $2}')
        fi

        # Check if the command is valid (not "command not found")
        if (command -v "$first_word" >/dev/null 2>&1) || (type "$first_word" >/dev/null 2>&1); then
            # If valid, handle it with exp_new_command for first-time use, exp_reused_command for subsequent use
            if ! grep -Fq "$last_command:::" "$used_commands_file"; then
                handle_command "$last_command" "$exp_new_command" "$msg_new_command" "$notify_on_new"
            else
                handle_command "$last_command" "$exp_reused_command" "$msg_repeat_command" "$notify_on_reused"
            fi
        else
            # If invalid, handle it with exp_false_new_command for first-time use, exp_false_reused_command for subsequent invalid use
            if ! grep -Fq "$last_command:::" "$used_commands_file"; then
                handle_command "$last_command" "$exp_false_new_command" "$msg_false_new_command" "$notify_on_false_new"
            else
                handle_command "$last_command" "$exp_false_reused_command" "$msg_false_repeat_command" "$notify_on_false_reused"
            fi
        fi

        # Check for level up
        level_up
    fi
}

# Make sed -i work on both GNU and BSD/macOS
# This is a helper function to make in-place editing work across platforms
sed_inplace() {
    local file="$1"
    local pattern="$2"
    local replacement="$3"
    local tmp_file="$file.tmp"
    
    sed "s|$pattern|$replacement|" "$file" > "$tmp_file" && mv "$tmp_file" "$file"
}

# Function to update daily use streak
update_streak() {
    local current_date=$(date +%Y-%m-%d)
    local last_date_used=$(grep "last_date_used=" "$streak_file" | cut -d'=' -f2)
    local streak=$(grep "streak=" "$streak_file" | cut -d'=' -f2)

    # Check if the script is used on the next day
    if [ "$current_date" != "$last_date_used" ]; then
        local day_diff=0
        
        # Calculate day difference in a cross-platform way
        # Try BSD/macOS date first, then GNU date, then fall back to simple comparison
        if date -v -1d >/dev/null 2>&1; then
            # BSD date (macOS)
            local last_seconds=$(date -j -f %Y-%m-%d "$last_date_used" +%s 2>/dev/null)
            local current_seconds=$(date -j -f %Y-%m-%d "$current_date" +%s 2>/dev/null)
            day_diff=$(( (current_seconds - last_seconds) / 86400 ))
        elif date -d yesterday >/dev/null 2>&1; then
            # GNU date (Linux)
            local last_date=$(date -d "$last_date_used" +%s)
            local current_date_timestamp=$(date -d "$current_date" +%s)
            day_diff=$(( (current_date_timestamp - last_date) / 86400 ))
        else
            # Simple comparison for platforms without date arithmetic (like some fish implementations)
            # Compare year, month, day manually
            local last_year=$(echo "$last_date_used" | cut -d'-' -f1)
            local last_month=$(echo "$last_date_used" | cut -d'-' -f2)
            local last_day=$(echo "$last_date_used" | cut -d'-' -f3)
            
            local curr_year=$(echo "$current_date" | cut -d'-' -f1)
            local curr_month=$(echo "$current_date" | cut -d'-' -f2)
            local curr_day=$(echo "$current_date" | cut -d'-' -f3)
            
            # Very simple check for consecutive days - only works for consecutive days, not gaps
            if [ "$last_year" = "$curr_year" ] && [ "$last_month" = "$curr_month" ] && [ $(( 10#$curr_day - 10#$last_day )) -eq 1 ]; then
                day_diff=1
            elif [ "$last_year" = "$curr_year" ] && [ $(( 10#$curr_month - 10#$last_month )) -eq 1 ]; then
                # Last day of month check (simplified)
                if [ "$last_day" = "31" ] || [ "$last_day" = "30" ] || 
                   ([ "$last_month" = "02" ] && ([ "$last_day" = "28" ] || [ "$last_day" = "29" ])); then
                    if [ "$curr_day" = "01" ]; then
                        day_diff=1
                    fi
                fi
            elif [ $(( 10#$curr_year - 10#$last_year )) -eq 1 ] && [ "$last_month" = "12" ] && [ "$curr_month" = "01" ]; then
                if [ "$last_day" = "31" ] && [ "$curr_day" = "01" ]; then
                    day_diff=1
                fi
            fi
        fi

        if [ "$day_diff" -eq 1 ]; then
            # Increment streak if the script was used on the next day
            streak=$((streak + 1))
        else
            # Reset streak if a day was skipped
            streak=1
        fi

        # Update .streak file
        sed_inplace "$streak_file" "^last_date_used=.*" "last_date_used=$current_date"
        sed_inplace "$streak_file" "^streak=.*" "streak=$streak"
    fi
}

#function to get the last command from the history file
getlastcommand(){
local c
case "$SHELL_NAME" in
    zsh)
        read -r c <<< "$(tail -n 1 $histfile | sed 's/\\n/\\\\n/g')"
        # Check for Zsh extended format
        if [[ "$c" == :* ]]; then
            # Strip the extended format: : timestamp:sequence;command
            c=$(echo "$c" | sed -e 's/^: [0-9]\+:[0-9]\+;//' -e 's/^[ \t]*//')
        fi
        printf '%s\n' "$c"
        ;;
    fish)
        # Fish history is stored in JSON format
        # Extract the last command (the most recent one will be at the top of the file)
        # Format: {"cmd":"command","when":"timestamp"}
        read -r c <<< "$(head -n 100 "$histfile" | grep -m 1 '"cmd"' | sed -e 's/.*"cmd"[[:space:]]*:[[:space:]]*"\(.*\)",.*/\1/' -e 's/\\\"/"/g')"
        printf '%s\n' "$c"
        ;;
    *)
		local command="$1"
		read -r c <<< "$(tail -n 1 $histfile)"
		printf '%s\n' "$c"
        ;;
esac
}

# Checks the current level
checkrank() {
    local level=$(get_lvl)
    local exp=$(get_exp)
    local needed=$(exp_needed_for_level)
    local rank=$(get_rank "$level")
    local rank_padding_left=$(( (26 - ${#rank}) / 2 ))
    local rank_padding_right=$(( 26 - ${#rank} - rank_padding_left ))
    local rank_line="||$(printf '%*s' $rank_padding_left) $rank $(printf '%*s' $rank_padding_right)||"
    local exp_padding_left=$(( (26 - ${#exp} - ${#needed} - 6) / 2 ))
    local exp_padding_right=$(( 26 - ${#exp} - ${#needed} - 6 - exp_padding_left ))
    local exp_line="||$(printf '%*s' "$exp_padding_left") EXP: $exp/$needed $(printf '%*s' "$exp_padding_right")||"
    local quote=$(get_quote "$level")

    printf "\n================================\n"
    printf "||       CURRENT LEVEL        ||\n"
    printf "||         Level: %-5s       ||\n" "$level"
    printf "%s\n" "$exp_line"
    printf "%s\n" "$rank_line"
    printf "================================\n"
    show_exp_progress
    printf "================================\n"
    printf "%s\n" "$quote"
    printf "================================\n\n"
}

# Level-up message
level_up_message() {
    local level=$1
    local rank=$(get_rank "$level")
    local rank_padding_left=$(( (26 - ${#rank}) / 2 ))
    local rank_padding_right=$(( 26 - ${#rank} - rank_padding_left ))
    local rank_line="||$(printf '%*s' $rank_padding_left) $rank $(printf '%*s' $rank_padding_right)||"
    local quote=$(get_quote "$level")

    printf "\n================================\n"
    printf "||          LEVEL UP!         ||\n"
    printf "||    You reached level %-5s ||\n" "$level"
    printf "%s\n" "$rank_line"
    printf "||                            ||\n"
    printf "||   ░░░░░░░░░▄▄▄▄▄░░░░░░░░   ||\n"
    printf "||   ░░░░░▄██████████▄░░░░░   ||\n"
    printf "||   ░░░▄██████████████▄░░░   ||\n"
    printf "================================\n"
    printf "%s\n" "$quote"
    printf "================================\n\n"
}

# Displays exp progress bar
show_exp_progress() {
  local exp=$(get_exp)
  local needed=$(exp_needed_for_level)
  local progress=$((exp * 30 / needed))
  printf "[%-30s] \n" "$(printf '#%.0s' $(seq 1 $progress))"
}

# Level-up ranks
get_rank() {
    local lvl=$1
    case $lvl in
        [1-4]) echo "Terminal Newbie" ;;
        [5-9]) echo "Script Kiddie" ;;
        1[0-4]) echo "Command Line Enthusiast" ;;
        1[5-9]) echo "Shell Apprentice" ;;
        2[0-4]) echo "Daemon Handler" ;;
        2[5-9]) echo "System Sorcerer" ;;
        3[0-9]) echo "Unix Warrior" ;;
        4[0-9]) echo "Pipe Artisan" ;;
        5[0-9]) echo "Network Nomad" ;;
        6[0-9]) echo "Bash Wizard" ;;
        7[0-9]) echo "Shell Savant" ;;
        8[0-9]) echo "Linux Warlock" ;;
        9[0-9]) echo "Archmage of the CLI" ;;
        *) echo "Root God" ;;
    esac
}

# rank quotes
get_quote() {
    local lvl=$1
    case $lvl in
        [1-4]) printf -- "  -\"Wait, how do I exit Vim?\"" ;;
        [5-9]) printf -- "  -\"I copied this from Stack \n    Overflow… hope it works.\"" ;;
        1[0-4]) printf -- "  -\"I run htop just to watch \n    the colors.\"" ;;
        1[5-9]) printf -- " -\"My .bashrc is literal art.\"" ;;
        2[0-4]) printf -- "  -\"I made a service… and it \n    stays running!\"" ;;
        2[5-9]) printf -- "  -\"My one-liner fixed your \n    DNS, and brewed coffee.\"" ;;
        3[0-9]) printf -- "  -\"I herd servers like cats.\"" ;;
        4[0-9]) printf -- "    -\"My scripts have error\n    handling… and comments.\"" ;;
        5[0-9]) printf -- "  -\"I SSH through three hops\n    just to say 'hi'.\"" ;;
        6[0-9]) printf -- "  -\"I see regex in my sleep.\"" ;;
        7[0-9]) printf -- "   -\"I use vi to edit emacs\n       configs. Fight me.\"" ;;
        8[0-9]) printf -- "    -\"I filed a bug report…\n       and then fixed it.\"" ;;
        9[0-9]) printf -- "  -\"I speak in ANSI escape\n    codes and dream in JSON.\"" ;;
        *) printf -- "       -\"/dev/null is my\n         recycling bin.\"" ;;
    esac
}

# Function to display stats
checkstats() {
    local total_commands=$(grep "TOTAL_COMMANDS=" "$exp_file" | cut -d'=' -f2)
    local most_used_command=$(awk -F ':::' '{if($2 > max){max=$2; cmd=$1}} END {print cmd " (" max " times)"}' "$used_commands_file")
    local unique_commands=$(wc -l < "$used_commands_file")

    local unlocked_count=$(grep -c ":UNLOCKED" "$achievements_file")
    local total_count=$(wc -l < "$achievements_file")
    local streak=$(grep "streak=" "$streak_file" | cut -d'=' -f2)

    echo "Current Streak: $streak days"
    echo "Unique Commands Used: $unique_commands"
    echo "Total Commands Used: $total_commands"
    echo "Most Used Command: ${most_used_command:-None yet}"
    echo ""
    echo "Achievements Unlocked ($unlocked_count/$total_count):"
    grep ":UNLOCKED" "$achievements_file" | awk -F ':' '{print "✔ " $1 " - " $2}'
}

# Displays help information
ghelp() {
    cat <<EOF

# =============================
# Linux Terminal Gamifier v1.6
# =============================
# This script gamifies your terminal by tracking experience points and levels
# based on the number of commands you execute. Newly found commands give more exp,
# repeated commands less, wrong commands still give a little. At least you tried.
#
# Supported shells: bash, zsh, fish
#
# You can use checkrank at any time to check your current progress.
# Use checkstats to display usage stats.
# Use ghelp to display a short info message.
# Use gupdate to update Linux Terminal Gamifier.

EOF
}

# Updates the gamifier script
gupdate()
{
 local current_version remote_version

    # Extract the current version from this script
    current_version=$(grep -oP '(?<=# Linux Terminal Gamifier v)\d+\.\d+' $HOME/gamifier | head -n 1)

    # Fetch the latest version from GitHub
    remote_version=$(curl -s "https://raw.githubusercontent.com/Divinux/linux-terminal-gamifier/main/gamifier" | grep -oP '(?<=# Linux Terminal Gamifier v)\d+\.\d+' | head -n 1)
    if [[ -z "$remote_version" ]]; then
        echo "Failed to fetch remote version."
        return 1
    fi

    if [[ "$current_version" != "$remote_version" ]]; then
        echo "New version available: v$remote_version (current: v$current_version). Updating..."
        curl --output $HOME/gamifier "https://raw.githubusercontent.com/Divinux/linux-terminal-gamifier/refs/heads/main/gamifier"
        source $HOME/gamifier
        echo "Update complete!"
    else
        echo "Linux Terminal Gamifier is up to date. (v$current_version)."
    fi
updateachievementlist
}

updateachievementlist()
{
local new_achievements existing_achievements
# Extract achievements from the new local script
        new_achievements=$(grep -oP '^\S.*:.*:.*:LOCKED$' "$HOME/gamifier")

        # Load existing achievements (including unlocked ones)
        existing_achievements=$(cat "$achievements_file")

        # Loop through new achievements and check if they already exist based on their name
        while IFS= read -r new_achievement; do
            new_achievement_name=$(echo "$new_achievement" | cut -d: -f1)  # Get the achievement name before the first colon
            if ! echo "$existing_achievements" | grep -q "^$new_achievement_name:"; then
                echo "$new_achievement" >> "$achievements_file"
            fi
        done <<< "$new_achievements"
}
